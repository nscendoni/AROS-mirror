======================
Все команды AROS Shell
======================

:Authors:   Sergey Mineychev
:Copyright: Copyright Љ 2006, The AROS Development Team
:Version:   $Revision: 30800 $
:Date:      $Date: 2009-03-08 18:28:50 +0100 (Sun, 08 Mar 2009) $
:Status:    Draft

.. Contents::

Введение в AROS Shell
=====================

-------------

`Index <index>`_

-------------

AROS так же обладает интерфейсом командной строки, 'Shell'. 
Его можно запустить через меню Wanderer>Shell. При этом открывается окно с
косандной строкой и путём текущего открытого окна AROS. Подсказка обычно показывает номер запущенной оболочки Shell и текущий путь.

Оболочка имеет историю команд, которую можно просмотреть курсорными клавишами
"вверх" и "вниз".

Также предусмотрена возможность автозавершения. Если написать первые символы команды или имени файла и нажать клавишу табуляции TAB, то Оболочка производит поиск соответствующих имен. При нахождении нескольких совпадений, открывается дополнительное окно для выбора имени.

Команды и мена файлов в AROS нечувствительны к регистру. Можно даже использовать символы смешанных регистров.

AROS будет искать команду в текущей директории и в пути поиска.
Путь поиска можно просмотреть или изменить командой `path <path>`_ 

Некоторые важные команды
------------------------
+ `CD <cd>`_ -- сменить директорию
+ `DIR <dir>`_ -- показать содержимое директории
+ `COPY <copy>`_ -- скопировать файлы и директории
+ `DELETE <delete>`_ -- удалить файлы и директории
+ `INFO <info>`_ -- показать доступные имена дисков
+ `MAKEDIR <makedir>`_ -- создать директорию
+ `RENAME <rename>`_ -- переименовать файлы и директории
+ `TYPE <type>`_ -- показать содержимое текстового файла

Путь
----
Абсолютные пути начинаются с имени устройства и двоеточия(:), директории разделяются наклонной чертой (/).
Имя диска может быть именем устройства (dh0:), именем тома (workbench:) или
логическим диском (см. команду `assign <assign>`_).

::
  
  Пример: dh0:dir1/dir2/file.dat

Если аргументом комады должен быть текущий путь, можно просто написать "".

::

  Пример: copy from ram:x to ""
  
Одно двоеточие означает начальную директорию текущего пути. Если путь начинается с двоеточия, тогда он берется по отношению к начальной директории заданного пути.

Наклонная черта в начале пути означает переход на уровень вверх, две - на два уровня и т.д. 

Если путь содержит пробелы, он должен быть заключен в двойные кавычки.

::

  Пример: type "имя с пробелами"

Шаблон команд
-------------
Знак вопроса после команды показывает шаблон параметров команды.
После вывода команда ожидает ввода параметров, ввод пустой строки равносилен
запуску комады без параметров.

::

  Пример: copy ?
  FROM/M,TO/A,ALL/S,QUIET/S,BUF=BUFFER/K/N,CLONE/S,DATES/S,NOPRO/S,COM/S,NOREQ/S

Ключи могут иметь следующие варианты::

  /A -- требуется аргумент
  /K -- ключ следует писать при использовании этого аргумента
  /S -- переключатель; имя переключателя включает опцию
  /N -- численный аргумент
  /M -- требуется аргумент, возможны несколько аргументов
  /F -- rest of command line
  =  -- сокращение; используется опционально

При вызове команды '=' можно использовать для чёткого разделения ключа и значения::

  Пример: copy from=a.dat to=b.dat
  
Шаблоны имён
------------
Некоторые команды позволяют использовать шаблоны в именах параметров::

  ?  -- один произвольный символ
  #? -- ноль и более произвольных символов
  #x -- ноль и более x
  ~  -- отрицание
  |  -- ИЛИ
  () -- группа
  [] -- диаппазон

Примеры::

  dir #?.info
  dir #?~(.info)
  dir a(b|c)d
  dir [a-c]e

Перенаправление
---------------

::

  > перенаправляет вывод в файл или устройство
  >> перенаправляет вывод и добавляет в конец файла
  < перенаправляет вывод из файла или устройства
  Пример: dir >ram:a 

Pipe
----
Для перенаправления вывода из одной команды в другую можно использовать поток. 
При этом команды соединяются символом \|. Необходимо ввести хотя бы один пробел
до и после \|::

  Пример: dir | othercommand
  
А если вторая команда ожидает ввода из файла ? В этом случае можно использовать 
виртуальное устройство 'in:'::

  Пример: dir | more in:  

Специальные устройства
----------------------
+ ram: Этот ram-диск можно использовать как жёсткий диск, но после перезагрузки его содержимое будет утеряно.
+ nil: если вы не хотите, чтобы сообщения команды попадали на экран, можно использовать устройство 'nil:'. Пример: delete #? >nil:

Запуск в фоновом режиме
-----------------------
Обычно команда занимает Оболочку до тех пор, пока не завершится. Команды
можно запускать в фоне командой `run <run>`_.

::

  Пример: run delete #?

Info-файлы
----------
Файлы с расширением '.info' играют важную роль в Wanderer. Они содержат иконку и некоторую дополнительную информацию. При работе с Оболочкой их необходимо принимать во внимание.

==========
AddBuffers
==========

 AddBuffers (drive) [(N)]

Шаблон
~~~~~~
::


     DRIVE/A, BUFFERS/N


Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::

     Добавляет буферы к списку доступных буферов указанного диска. Добавление
     буферов ускоряет доступ к диску, но потребляет системную память (по 512
     байт на каждый буфер). При указании отрицательного числа убирает буферы
     указанного диска.
     Если указан только аргумент DRIVE, для этого диска показывается текущее 
     число буферов, и изменения не вносятся.
         

Ввод
~~~~
::


     DRIVE    --  имя диска для изменения или показа буферов
     BUFFERS  --  количество буферов для добавления/удаления (при отриц. числе)
                  к заданному диску.

=====
Alias
=====



 Alias 

Шаблон
~~~~~~
::


     NAME,STRING/F


Расположение
~~~~~~~~~~~~
::


     Workbench:c


Функции
~~~~~~~
::

     Alias позволяет создавать альтернативные мена для команд DOS. Если Alias
     используется без параметров, то показывается текущий список назначенных 
     альтернатив в пределах текущей Оболочки.
     
     Используя пару квадратных скобок в alias, можно передать параметры "новой"
     команде. Если параметры не указаны, выводится текущий список алиасов.
     

Ввод
~~~~
::


     NAME    - Имя для задания альтернативы.

     STRING  - Значение задаваемой альтернативы NAME.


Результат
~~~~~~~~~
::


     Стандартные коды ошибок DOS.


Пример
~~~~~~
::


     Alias DF "Type [] number"
          
         При выполнении команды "DF S:Shell-Startup" в командной строке,
         на самом деле выполняется команда "Type S:Shell-Startup number".
         При этом будет выведено содержимое файла S:Shell-Startup в оболочке
         с номерами строк по левую сторону.
         

См. также
~~~~~~~~~
::


     Unalias


===
Ask
===


 Ask <prompt>

Шаблон
~~~~~~
::


     PROMPT/A


Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::

     Запрашивает ввод у пользователя. Возможные варианты - y для "yes"
     и n или Return для "no". При вводе y возвращаемый код устанавливается на 5.


Ввод
~~~~
::


     PROMPT -- текст, показываемый в окне в качестве приглашения.


См. также
~~~~~~~~~
::

     
     RequestChoice
     

======
Assign
======


 Assign [(name):] [{(target)}] [LIST] [EXISTS] [DISMOUNT] [DEFER]

Шаблон
~~~~~~
::


     NAME, TARGET/M, LIST/S, EXISTS/S, DISMOUNT/S, DEFER/S, PATH/S, ADD/S,
     REMOVE/S, VOLS/S, DIRS/S, DEVICES/S


Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::

     ASSIGN создаёт ссылку(указатель) на файл или директорию. Ссылка - это 
     логическое имя устройства, позволяющее просто описывать объект ссылки,
     используя ссылку вместо пути.

     Если указаны NAME и TARGET, ASSIGN назначает заданное логическое имя 
     выбранной цели. Если заданное имя (NAME) уже присвоено файлу или 
     директории, новая цель заменит предыдущую. После аргумента NAME 
     необходимо указывать двоеточие. 
     
     Если задано только имя (NAME), то удаляются все указатели, с ним связанные.
     Если не задно ни одного аргумента, выводится список назначенных 
     ссылок (указателей).
     

Ввод
~~~~
::


     NAME      --  имя ссылки, которое следует присвоить файлу или директории
     TARGET    --  один файл/директория, или более для назначения NAME
     LIST      --  вывести список назначенных указателей
     EXISTS    --  если NAME уже присвоено, выставить флаг состояния WARN
     DISMOUNT  --  убрать том или устройство NAME из списка DOS
     DEFER     --  выполнить ASSIGN для пути или директории, не обязательно
                   существующей в момент назначения. При первом упоминании NAME 
                   оно будет присвоено объекту.
     PATH      --  для пути назначается non-binding assign. Это означает, что 
                   указатель переопределяется каждый раз при создании ссылки на
                   NAME. Как и для DEFER, путь не обязательно должен 
                   существовать при выполнении команды.                  
     ADD       --  не заменять указатель для NAME, а добавить к нему объект
                   (множественные указатели)
     REMOVE    --  убрать указатель
     VOLS      --  показывать назначенные тома вместе с LIST
     DIRS      --  показывать назначенные директории вместе с LIST
     DEVICES   --  показывать назначенные устройства вместе с LIST
     


=====
Avail
=====

 Avail [CHIP | FAST | TOTAL | FLUSH] [H | HUMAN]

Шаблон
~~~~~~
::


     CHIP/S, FAST/S, TOTAL/S, FLUSH/S, H=HUMAN/S        


Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::

     Выдаёт сводку используемой и доступной памяти в системе. Для высвобождения
     неиспользованной памяти (которая может быть занята библиотеками, 
     устройствами, шрифтами и прочим, что есть в памяти, но не используется 
     в данный момент) используйте опцию FLUSH.
     

Ввод
~~~~
::


     CHIP   --  показывать только память "chip" 
     FAST   --  показывать только память "fast" 
     TOTAL  --  показывать информацию для всех типов памяти
     FLUSH  --  очистить память, занятую второстепеным содержимым
     HUMAN  --  показывать значения, привычные для человека (гигаБайты как "G",
                мегаБайты как "M", килоБайты как "K")


Примечание
~~~~~~~~~~
::


     Память "Chip" and "fast" связаны с компьютерами Amiga и могут быть 
     неприменимы в вашей системе.


====
Beep
====

 Beep 

Формат
~~~~~~
::

     Beep


Расположение
~~~~~~~~~~~~
::

     Workbench:C


Функции
~~~~~~~
::

     Производит гудок через Intuition DisplayBeep(NULL).


=====
Break
=====


 Break 

Вид команды
~~~~~~~~~~~
::

     Break <process> [ALL|C|D|E|F]


Шаблон
~~~~~~
::

     PROCESS/N,PORT,ALL/S,C/S,D/S,E/S,F/S


Расположение
~~~~~~~~~~~~
::

     Workbench:c


Функции
~~~~~~~
::
     BREAK посылает один или несколько сигналов процессу CLI. Аргумент PROCESS
     определяет номер (ID) процесса CLI, которому необходимо отправить сигнал. 
     Команда STATUS выводит перечисление всех запущенных CLI-процессов вместе с
     их ID.
     
     Также можно выбрать общее имя порта и посылать сигналы задаче через
     этот порт.
     (You can also specify a public port name and send signal's to the
     port's task.)
     
     Можно посылать все доступные сигналы за один раз при использовании опции
     ALL, а также любые комбинации флагов CTRL-C, CTRL-D, CTRL-E и CTRL-F с 
     помощью соответствующих опций. Когда задан только ID процесса CLI, будет 
     послан сигнал CTRL-C.


     Результат выполнения команды BREAK тот же, как при выборе соответствующего
     процесса в окне консоли и нажатии соответствующей комбинации клавиш.
     

     Обычное назначение клавиш таково:
         CTRL-C      -       Остановить процесс
         CTRL-D      -       Остановить скрипт shell
         CTRL-E      -       Закрыть окно процесса
         CTRL-F      -       Сделать окно процесса активным

     Не все программы подчиняются этим сигналам, однако большинство должно 
     воспринимать CTRL-C.
     

Примеры
~~~~~~~
::

     
     1.SYS:> BREAK 1

         Послать сигнал CTRL-C процессу с номером 1.

     1.SYS:> BREAK 4 E

         Послать сигнал CTRL-E процессу с номером 4.

         
См. также
~~~~~~~~~
::

     Status


==
CD
==


 CD 

Шаблон
~~~~~~
::


     DIR


Расположение
~~~~~~~~~~~~
::


     Workbench:C/
        

Функции
~~~~~~~
::

     Без опций эта команда показывает имя текущей директории.
     С указанным значением она меняет текущую директорию.
     

Ввод
~~~~
::


     DIR -- Путь, на который будет сменена текущая директория


=============
ChangeTaskPri
=============


 ChangeTaskPri 

Вид команды
~~~~~~~~~~~
::

     ChangeTaskPri <приоритет> [ PROCESS <номер процесса> ]


Шаблон
~~~~~~
::

     PRI=PRIORITY/A/N,PROCESS/K/N


Расположение
~~~~~~~~~~~~
::

     Workbench:c


Функции
~~~~~~~
::
     
     Команда ChangeTaskPri используется для изменения текущего приоритета
     запущенных задач. Так как AROS - многозадачная система, можно задать,
     какие задачи будут получать больше процессорного времени, изменив их 
     приоритеты.
     
     Значение |приоритета| может быть задано от -128 до 127, однако, 
     задавать значения более 4 не рекомендуется, так как они могут 
     конфликтовать с жизненно важными системными процессами. 
     БОльшие значения дадут процессу более высокий приоритет на CPU.

     Используя команду Status можно получить список запущенных задач и их
     номера процессов.
     

Примеры
~~~~~~~
::

     
     1.SYS:> ChangeTaskPri 1 Process 1

         Задает приоритет заданного процесса (ID=1) равным 1.

     1.SYS:> ChangeTaskPri 1

         Также задает приоритет текущего процесса равным 1.


См. также
~~~~~~~~~
::

     Status


====
Copy
====


 Copy 

Шаблон
~~~~~~
::


     FROM/M, TO, ALL/S, QUIET/S, BUF=BUFFER/K/N, CLONE/S, DATES/S, NOPRO/S,
     COM=COMMENT/S, NOREQ/S,

     PAT=PATTERN/K, DIRECT/S,SILENT/S, ERRWARN/S, MAKEDIR/S, MOVE/S,
     DELETE/S, HARD=HARDLINK/S, SOFT=SOFTLINK/S, FOLNK=FORCELINK/S,
     FODEL=FORCEDELETE/S, FOOVR=FORCEOVERWRITE/S, DONTOVR=DONTOVERWRITE/S,
     FORCE/S


Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::


     Создаёт одинаковые копии одного или нескольких файлов


Ввод
~~~~
::


     FROM      --  несколько входных файлов
     TO        --  конечные файлы или директория
     ALL       --  просматриваь поддиректории
     QUIET     --  не выводить никаких сообщеий или запросов
     BUFFER    --  размер буфера для копирования в блоках по 512 Байт
                   (по умолчанию 1024 (= 512K))
     CLONE     --  также копировать комментарии, атрибуты защиты и дату
     DATES     --  копировать дату файлов
     NOPRO     --  не копировать атрибуты защиты файлов
     COMMENT   --  копировать комментарии файлов
     NOREQ     --  не выводить запросы

     PATTERN   --  маска (pattern), которой должны соответствовать имена файлов
     DIRECT    --  только копирование, никаких тестов и проверок
     VERBOSE   --  выводить больше информации
     ERRWARN   --  при ошибке копирования одного фала прекращать копирования
     MAKEDIR   --  обрабатывать директории
     MOVE      --  после успешного копирования удалить исходные файлы
     DELETE    --  не копировать, а удалить исходные файлы
     HARDLINK  --  создаёт hardlink на исходный файл вместо копирования
     SOFTLINK  --  создаёт softlink на исходный файл вместо копирования
     FOLNK     --  создавать ссылки также на директории
     FODEL     --  также удалять и защищенные файлы
     FOOVR     --  также перезаписать и защищенные файлы
     DONTOVR   --  не перезаписывать файлы назначения
     FORCE     --  НЕ ИСПОЛЬЗОВАТЬ. Оставлено для совместимости.


 Более подробное описание:

 FROM:
 Исходные файл(ы). При обработке директорий все файлы в них считаются исходными.
 Могут иметь стандартные маски (patterns).

 TO:
 Файл назначения, или, при нескольких исходных файлах, директория назначения.
 Директории назначения создаются вклюая все поддиректории.
 
 ALL:
 Рекурсивная(циклическая) обработка директорий

 QUIET:
 Убирает вообще все сообщения, включая и запросы для отсутствующих дисков,  
 и все прочие сообщения о проблемах!

 BUF=BUFFER:
 Задаёт размер буферов по 512 Байт для копирования. По умолчанию их 200
 [100КБ памяти]. Минимальный размер - один буфер, но использовать такое значение
 нельзя.

 PAT=PATTERN:
 PATTERN позволяет задать маску (pattern) dos, которой все файлы должны 
 соответствовать. Полезна вместе с опцией ALL.

 Пример:
 Если надо удалить все файлы .info files во всех каталогах, можно задать опции:
 Copy DELETE #? ALL PAT #?.info

 CLONE:
 Комментарии, информация о дате и атрибуты защиты будут скопированы вместе с 
 файлами или директориями.
 
 DATES:
 Временная информация исходных файлов будет задана для конечных.

 NOPRO:
 Атрибуты защиты исходных файлов НЕ копируются, и будут заданы атрибуты по 
 умолчанию [rwed]. 
 
 COM=COMMENT:
 Комментарий исходного файла копируется в конечный.

 NOREQ:
 При появлении ошибок, никакие стандартные запросы DOS не показываются.


 DIRECT:
 Определенные устройства не позволяют использовать некоторые используемые виды 
 запросов пакетов DOS. Эта опция включает самое простое копирование, открывая 
 исходные файлы и файлы назначения напрямую безо всяких проверок.
 Опции ALL, PAT, CLONE, DATES, NOPRO, COM, MAKEDIR, MOVE, DELETE, HARD,
 SOFT, FOLNK, FODEL, FOOVR, DONTOVR и множественные входные файлы не могут 
 использоваться вместе с этой опцией. При этом допускается только один исходный 
 (и конечный) файл.
 Также эта опция полезна в случае, если требуется удалить символьную (softlink) 
 ссылку, более не указывающую на действительный файл.
 Пример использования: 'Copy DIRECT text PRT:' печатает файл под названием text.
 Большинство таких случаев обрабатываются Copy автоматически, но всё же опция 
 иногда может быть полезна.
 
 VERBOSE:
 Выдаёт дополнительные сообщения.

 ERRWARN:
 Copy выдаёт 3 типа ошибок dos.library:
 5   WARN    Ошибка копирования единичного файла, Copy пропускает его и 
             приступает к следующему.
 10  ERROR   Не удалось создать директорию, или прочая нефатальная ошибка.
             Copy завершает выполнение.
 20  FAIL    По-настоящему фатальная ошибка (Мало памяти, Examine failed, ...)
             Copy завершает выполнение.
 При задании опции  ERRWARN, ошибка с кодом 5 (WARN) меняет значение на 10 
 (ERROR). При этом Copy завершается при любой ошибке.

 MAKEDIR:
 Все имена в поле FROM считаются директориями, икоторые необходимо создать.

 MOVE:
 Файлы не копируются, а перемещаются (или переименовываются). Это означает, что
 после перемещения, исходный файл прекратит существование.
 
 DELETE:
 Ничего не копируется, но исходные файлы будут удалены!

 HARD=HARDLINK:
 Вместо копирования файлов, создаётся hard link. Это возможно, только если 
 директория назначения находится на одном устройстве с исходной.
 При задании опции ALL, рекурсивно сканируются поддиректории, иначе Copy создаёт
 ссылки на директории.
 
 SOFT=SOFTLINK:
 Вместо копирования директорий, создаётся soft link. Такие ссылки можно 
 использовать и между различными устройствами. Они создаются только для 
 директорий, при этом файлы пропускаются. Таким образом, опция FORCELINK в этом 
 случае установлена в true.
 ЗАМЕЧАНИЕ: Softlinkи официально не поддерживаются ОС, и могут быть опасны в 
 использовании. Рекомендуется не использовать эту опцию! См. описание ниже.
 
 FOLNK=FORCELINK:
 Когда требуется создание ссылок на директории, необходима эта опция. См. 
 раздел "О ссылках" с описаниями возможных проблем.
 
 FODEL=FORCEDELETE:
 Если эта опция включена, файлы удаляются и тогда, когда они защищены.
 
 FOOVR=FORCEOVERWRITE:
 Если эта опция включена, файлы перезаписываются и тогда, когда они защищены.
 
 DONTOVR=DONTOVERWRITE:
 Эта опция позволяет избежать перезаписи конечных файлов.
 


См. также
~~~~~~~~~
::


     Delete, Rename, MakeDir, MakeLink


====
Date
====


 Date [<day>] [<date>] [<time>] [TO | VER <filename>]

Шаблон
~~~~~~
::


     DAY,DATE,TIME,TO=VER/K


Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::

     
     Показывает или задаёт системную дату и/или время
     

Ввод
~~~~
::


     DAY  -- задаёт дату по имени (понедельник, вторник, ... , завтра, вчера)
     DATE -- задаёт дату в формате ДД-МММ-ГГ.
             MMM либо число, либо первые 3 символа названия месяца по-английски.
     TIME -- задаёт время в формате ЧЧ:ММ:СС
     TO   -- вывод направляется в файл          


Примеры
~~~~~~~
::


     date 2-feb-06
     date 21:10


======
Delete
======


 Delete 

Шаблон
~~~~~~
::

 
 Delete { (name | pattern) } [ALL] [QUIET] [FORCE]


Расположение
~~~~~~~~~~~~
::


     Workbench/c


Функции
~~~~~~~
::

 
 Удаляет файлы и директории. Можно удалить несколько файлов и директорий, 
 перечислив их отдельно, или с помощью использования обобщений(wildcards). 
 Для остановки множественного удаления нажмите press CTRL-C. Delete уведомляет
 пользователя о файлах, которые не сможет удалить. 
      Delete не сможет удалить не пустые директории, пока не используется опция 
 ALL. Для того, чтобы избежать вывода имен файлов и директорий, используется
 опция QUIET. Если у файла или директории защитный атрибут 'd' убран, они не 
 будут удалены, пока не используется опция FORCE.
      

Ввод
~~~~
::


 FILE/M/A  --  удаляемые файлы или директории (могут использоваться маски
               (patterns)
 ALL/S     --  удалять каталоги рекурсивно
 QUIET/S   --  не печатать, какие файлы/директории удаляются
 FORCE/S   --  удалять даже защищенные от удаления файлы/директории


Примеры
~~~~~~~
::


 Delete RAM:T/#? ALL FORCE
 
 Рекурсивно удаляет все директории и файлы в директории RAM:T, даже если они
 защищены от удаления.

===
Dir
===

 Dir [(dir | pattern)] [OPT A | I | D | F] [ALL] [DIRS] [FILES] [INTER]

Шаблон
~~~~~~
::


 DIR,OPT/K,ALL/S,DIRS/S,FILES/S,INTER/S


Расположение
~~~~~~~~~~~~
::


 Workbench:C


Функции
~~~~~~~
::


 DIR показывает файлы и директории, расположенные в текущей или указанной
 директории. Директории перечисляются первыми, далее в алфавитном порядке
 в две колонки перечисляются файлы. Нажатие CTRL-C прекращает вывод информации.
 


Ввод
~~~~
::


 ALL    --  Показывать рекурсивно все поддиректории и их файлы.
 DIRS   --  Показывать только директории.
 FILES  --  Показывать только файлы.
 INTER  --  Включить интерактивный режим.

            Интерактивный режим перечисления останавливается после каждого
            выведенного имени и выдаёт вопрос, в ответ на который можно вводить 
            команды. Перечислим их:
            
            Return      --  Перейти к следующему файлу/директории.
            E/ENTER     --  Войти в директорию.
            DEL/DELETE  --  Удалить файл или пустую директорию.
            C/COM       --  Позволяет сделать файл или директорию вводом 
                            для команды DOS (указанную после C или COM,
                            или отдельно указанную после ввода).
            Q/QUIT      --  Выйти из интерактивного режима.
            B/BACK      --  Вернуться в директорию ниже уровнем.
====
Echo
====


 Echo [<string>] [NOLINE] [FIRST <n>] [LEN <n>] [TO <filename>]

Шаблон
~~~~~~
::


     STRING/M,NOLINE/S,FIRST/K/N,LEN/K/N,TO/K


Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::


     Выводит текстовую строку.


Ввод
~~~~
::


     STRING -- строки для вывода
     NOLINE -- без символа начала новой строки в конце предыдущей
     FIRST  -- Первый показываемый символ
     LEN    -- количество показываемых символов
     TO     -- файл или устройство для вывода
====
Else
====


 Else 

Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::


     Разделяет блоки 'true' ('правда') и 'false' ('ложь') в условии If.
     Блок, следующий за командой Else выполняется, если состояние 
     предшествовавшего условия If было 'ложь'.
     

Примеры
~~~~~~~
::


     If EXISTS Sys:Devs
         Copy random.device Sys:Devs/
     Else
         Echo "Не могу найти Sys:Devs"
     EndIf


См. также
~~~~~~~~~
::


     If, EndIf


======
EndCli
======

 EndCli 

Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::


     Закрывает окно CLI


=====
EndIf
=====


 EndIf 

Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::


     Завершает условие If. Если состояние команды If было ложным (false),
     следующие за ней команлы будут пропущены до соответствующей команды EndIf,
     но только, если не будет найдена комада Else.
     

См. также
~~~~~~~~~
::


     If, Else


=======
EndSkip
=======


 EndSkip 

Расположение
~~~~~~~~~~~~
::


     Workbench:C


Описание
~~~~~~~~

В точности соответствует команде EndIf...
====
Eval
====


 Eval 

Шаблон
~~~~~~
::


     VALUE1/A,OP,VALUE2/M,TO/K,LFORMAT/K


Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::

     Вычисляет численные выражения и выдаёт результат. Результат выводится на 
     стандартный вывод, если не указана опция TO, выводящая результат в файл.
     Используя переключатель LFORMAT, можно указать, в каком виде выводить 
     результат. Числа, предваряемые символами 0x или #x считаются 
     шестнацатиричными, а символами # или 0 - как восьмеричные. Символы алфавита
     берутся в одиночные кавычки (') и вычисляются по их эквивалентным значениям
     ASCII.

Ввод
~~~~
::


     VALUE1,
     OP,
     VALUE2      --  Вычисляемое выражение. Поддерживаются следующие операторы:

                     Операция              Обозначение
                     ----------------------------------
                     сложение                   +
                     вычитание                  -
                     умножение                  *
                     деление                    /
                     остаток от деления         mod, M, m, %
                     поразрядное И              &
                     поразрядное ИЛИ            |
                     поразрядное НЕ             ~
                     сдвиг влево                lsh, L, l
                     сдвиг вправо               rsh, R, r
                     отрицание                  -
                     исключающее ИЛИ            xor, X, x
                     поразрядное присвоение
                     (equivalence)              eqv, E, e

     TO          --  Файл для записи результата
     LFORMAT     --  printf-подобное указание формата ответа.
                     Возможные варианты:
                      
                     %x  --  шестнадцатеричный вывод
                     %o  --  восьмеричный вывод
                     %n  --  десятичный вывод
                     %c  --  символьный вывод (символ ANSI,
                             соответствующий заданному значению)
                             
                     При указании *n в строке LFORMAT, выводится новая строка.                  

=======
Execute
=======


 Execute <script> [{<arguments>}]

Шаблон
~~~~~~
::


     FILE/A


Расположение
~~~~~~~~~~~~
::


     Workbench:C


Функции
~~~~~~~
::


     Выполняет скрипт, оперирующий командами DOS.
     

Ввод
~~~~
::


     FILE -- файл скрипта для исполнения


======
FailAt
======


 FailAt 

Формат
~~~~~~
::

     FailAt <предел>


Шаблон
~~~~~~
::

     RCLIM/N


Расположение
~~~~~~~~~~~~
::

     C:


Функции
~~~~~~~
::

     FailAt задаёт предел для возвращаемого кода ошибки выполняющегося скрипта 
     shell. Если какая-либо команда возвращает код, равный заданному пределу 
     или выше, выполнение скрипта прерывается.
     
     Обычные коды ошибок:
     
         0   - Без ошибок
         5   - Предупреждение
         10  - Ошибка
         20  - Сбой

     Обычное значение для предела выдаваемого кода ошибки равно 10.
     

Примеры
~~~~~~~
::

     Предположим, что имеется скрипт с командами
     
         Copy RAM:SomeFile DF0:
         Echo "Done!"

     и файл RAM:SomeFile не существует, тогда команда Copy вернет занчение:

         Copy: object not found
         Copy: returned with error code 20

     и выполнение скрипта прервется. Если же ввести в скрипт команду
     
         FailAt 21

     тогда скрипт продолжит выполнение, поскольку код, возвращённый Copy
     меньше заданного предела кодов ошибок.
=====
Fault
=====


 Fault 

Формат
~~~~~~
::

     Fault <error number>


Шаблон
~~~~~~
::

     NUMBERS/N/M


Расположение
~~~~~~~~~~~~
::

     INTERNAL


Функции
~~~~~~~~
::

     Fault печатает сообщение, соответствующее заданному номеру ошибки.
     Номеров может быть несколько сразу, но они должны быть разделены пробелами.
     

Примеры
~~~~~~~
::


     1.SYS:> Fault 205
     Fault 205: object not found

         Команда сообщит, что код ошибки 205 означает, что объект на диске не 
         был найден.
========
Filenote
========


 Filenote 

Шаблон
~~~~~~
::


     FILE/A,COMMENT,ALL/S,QUIET/S


Расположение
~~~~~~~~~~~~
::


     Workbench:c


Функции
~~~~~~~
::


     Добавляет комментарий файлу или директории.
     

     Filenote позволяет осуществить рекурсивное сканирование всех
     директорий с добавлением комментариев каждому файлу/директории, 
     соответствующих заданной маске поиска.


Ввод
~~~~
::


     FILE    - Должна быть задана всегда. Может быть либо именем файла с 
               полным путем или соответствующая маска имен файлов для поиска.
     
     COMMENT - Строка ASCII, которая будет добавлена как комментарий к заданному
               файлу/директории.
     
               Чтобы задать комментарий, содержащий вложенные кавычки,
               каждую из кавычек предваряйте звездочкой.
               
                 т.е. Filenote FILE=RAM:test.txt COMMENT=*"hello*"

     ALL     - Логический оператор. Если указан, Filenote рекурсивно просматривает
               все директории, соответствующие заданной маске.
     
     QUIET   - Логический оператор. Если указан, на стандартный вывод не 
               выводится никаких диагностических сообщений.
     
Результат
~~~~~~~~~
::


     Стандартные коды ошибок DOS.
     

Примеры
~~~~~~~
::


     Filenote ram: hello all

         Пролистывает все директории на RAM:, добавляя комментарий "hello"
         к каждому файлу/директории.
         

Заметки
~~~~~~~
::


     Вывод из AROS'овой Filenote более приятный и структурированный, 
     чем от стандартной команды Filenote.
     
     Пока не поддерживаются множественные указатели (multi-assigns).
     


См. также
~~~~~~~~~
::


     dos.library/SetComment()


===
Get
===

 Get 

Шаблон
~~~~~~
::


     NAME/A


Расположение
~~~~~~~~~~~~
::


     Workbench:c


Функции
~~~~~~~
::


     Выдаёт информацию из заданной локальной переменной.
     

Ввод
~~~~
::


     NAME - Имя локальной переменной.


Результат
~~~~~~~~~
::


     Стандартные коды ошибок DOS.
     

Примеры
~~~~~~~
::


     Get Result2
         
         Таким образом можно получить вторичный код результата исполнения
         последней команды.
         

См. также
~~~~~~~~~
::


     Set, Unset


======
Getenv
======


 Getenv 

Шаблон
~~~~~~
::


     NAME/A


Расположение
~~~~~~~~~~~~
::


     Workbench:c


Функции
~~~~~~~
::


     Выдаёт информацию из заданной локальной переменной.
     

Ввод
~~~~
::


     NAME - Имя локальной переменной.


Результат
~~~~~~~~~
::


     Стандартные коды ошибок DOS.
     

Примеры
~~~~~~~
::


     Getenv Kickstart

         Таким образом можно узнать версию Kickstart ROM.
         

См. также
~~~~~~~~~
::


     Setenv, Unsetenv


