diff -ruN ffmpeg-3.0.1/configure ffmpeg-3.0.1.aros/configure
--- ffmpeg-3.0.1/configure	2016-03-29 03:27:11.000000000 +0100
+++ ffmpeg-3.0.1.aros/configure	2016-04-17 10:40:16.268649237 +0100
@@ -4467,6 +4467,8 @@
         SLIB_INSTALL_LINKS=
         SHFLAGS='-shared -Wl,-soname,$(SLIBNAME)'
         ;;
+    aros)
+        ;;
     haiku)
         prefix_default="/boot/common"
         network_extralibs="-lnetwork"
diff -ruN ffmpeg-3.0.1/libavformat/Makefile ffmpeg-3.0.1.aros/libavformat/Makefile
--- ffmpeg-3.0.1/libavformat/Makefile	2016-03-29 03:25:27.000000000 +0100
+++ ffmpeg-3.0.1.aros/libavformat/Makefile	2016-04-17 10:40:16.268649237 +0100
@@ -5,6 +5,7 @@
 HEADERS = avformat.h                                                    \
           avio.h                                                        \
           version.h                                                     \
+          url.h
 
 OBJS = allformats.o         \
        avio.o               \
diff -ruN ffmpeg-3.0.1/libavformat/os_support.h ffmpeg-3.0.1.aros/libavformat/os_support.h
--- ffmpeg-3.0.1/libavformat/os_support.h	2016-03-29 03:25:29.000000000 +0100
+++ ffmpeg-3.0.1.aros/libavformat/os_support.h	2016-04-23 14:50:59.696886816 +0100
@@ -105,6 +105,12 @@
 #define closesocket close
 #endif
 
+#if defined(__AROS__)
+#undef closesocket
+#define closesocket CloseSocket
+#include <proto/socket.h>
+#endif
+
 #if !HAVE_POLL_H
 typedef unsigned long nfds_t;
 
--- ffmpeg-3.0.1/libavformat/network.c	2016-03-29 04:25:29.000000000 +0200
+++ ffmpeg-3.0.1-aros/libavformat/network.c	2018-11-05 19:07:14.145466836 +0100
@@ -27,6 +27,22 @@
 #include "libavutil/mem.h"
 #include "libavutil/time.h"
 
+#if defined(AROS)
+#include <exec/types.h>
+#include <exec/libraries.h>
+#include <bsdsocket/socketbasetags.h>
+#include <proto/exec.h>
+#include <proto/bsdsocket.h>
+
+struct Library *SocketBase = NULL;
+#endif
+
+
+#if defined(AROS)
+    #include <aros/stdc/ctype.h>
+    extern struct Library *SocketBase;
+#endif
+
 int ff_tls_init(void)
 {
 #if CONFIG_TLS_OPENSSL_PROTOCOL
@@ -58,6 +74,22 @@
     WSADATA wsaData;
 #endif
 
+#if defined(AROS)
+        if ((SocketBase = OpenLibrary("bsdsocket.library", 0)) == NULL) {
+            fprintf(stderr, "Couldn't open bsdsocket.library. Is a TCP/IP stack running?\n");
+            OPENSSL_EXIT(10);
+        }
+
+        atexit(aros_bsdsocket_close);
+
+        if(SocketBaseTags(SBTM_SETVAL(SBTC_ERRNOPTR(sizeof(errno))), (IPTR) &errno,
+                          SBTM_SETVAL(SBTC_LOGTAGPTR),               (IPTR) "openssl",
+                          TAG_DONE)) {
+            fprintf(stderr, "Error initialising bsdsocket.library\n");
+            OPENSSL_EXIT(10);
+        }
+#endif
+
     if (!ff_network_inited_globally)
         av_log(NULL, AV_LOG_WARNING, "Using network protocols without global "
                                      "network initialization. Please use "
--- ffmpeg-3.0.1/libavformat/udp.c	2018-11-06 02:17:19.789466836 +0100
+++ ffmpeg-3.0.1-aros/libavformat/udp.c	2018-11-06 05:48:50.837466836 +0100
@@ -450,12 +450,13 @@
             int was_connected = s->is_connected;
             s->is_connected = strtol(buf, NULL, 10);
             if (s->is_connected && !was_connected) {
-                if (connect(s->udp_fd, (struct sockaddr *) &s->dest_addr,
-                            s->dest_addr_len)) {
-                    s->is_connected = 0;
-                    log_net_error(h, AV_LOG_ERROR, "connect");
+                //if (connect(s->udp_fd, (struct sockaddr *) &s->dest_addr,
+                //            s->dest_addr_len)) {
+                //    s->is_connected = 0;
+                //    log_net_error(h, AV_LOG_ERROR, "connect");
+                    log_net_error(h, AV_LOG_ERROR, "UDP NOT SUPPORTED");
                     return AVERROR(EIO);
-                }
+                //}
             }
         }
     }
@@ -507,7 +508,7 @@
            see "General Information" / "Thread Cancelation Overview"
            in Single Unix. */
         pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_cancelstate);
-        len = recv(s->udp_fd, s->tmp+4, sizeof(s->tmp)-4, 0);
+        //len = recv(s->udp_fd, s->tmp+4, sizeof(s->tmp)-4, 0);
         pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &old_cancelstate);
         pthread_mutex_lock(&s->mutex);
         if (len < 0) {
@@ -815,10 +816,11 @@
         ff_socket_nonblock(udp_fd, 1);
     }
     if (s->is_connected) {
-        if (connect(udp_fd, (struct sockaddr *) &s->dest_addr, s->dest_addr_len)) {
-            log_net_error(h, AV_LOG_ERROR, "connect");
+        //if (connect(udp_fd, (struct sockaddr *) &s->dest_addr, s->dest_addr_len)) {
+            //log_net_error(h, AV_LOG_ERROR, "connect");
+            log_net_error(h, AV_LOG_ERROR, "UDP NOT SUPPORTED");
             goto fail;
-        }
+        //}
     }
 
     for (i = 0; i < num_include_sources; i++)
@@ -861,8 +863,8 @@
     pthread_mutex_destroy(&s->mutex);
 #endif
  fail:
-    if (udp_fd >= 0)
-        closesocket(udp_fd);
+    if (udp_fd >= 0) {}
+        //closesocket(udp_fd);
     av_fifo_freep(&s->fifo);
     for (i = 0; i < num_include_sources; i++)
         av_freep(&include_sources[i]);
@@ -935,7 +937,7 @@
         if (ret < 0)
             return ret;
     }
-    ret = recv(s->udp_fd, buf, size, 0);
+    //ret = recv(s->udp_fd, buf, size, 0);
 
     return ret < 0 ? ff_neterrno() : ret;
 }
@@ -952,12 +954,12 @@
     }
 
     if (!s->is_connected) {
-        ret = sendto (s->udp_fd, buf, size, 0,
-                      (struct sockaddr *) &s->dest_addr,
-                      s->dest_addr_len);
-    } else
-        ret = send(s->udp_fd, buf, size, 0);
-
+        //ret = sendto (s->udp_fd, buf, size, 0,
+        //              (struct sockaddr *) &s->dest_addr,
+        //              s->dest_addr_len);
+    } else {
+        //ret = send(s->udp_fd, buf, size, 0);
+    }
     return ret < 0 ? ff_neterrno() : ret;
 }
 
@@ -967,7 +969,7 @@
 
     if (s->is_multicast && (h->flags & AVIO_FLAG_READ))
         udp_leave_multicast_group(s->udp_fd, (struct sockaddr *)&s->dest_addr,(struct sockaddr *)&s->local_addr_storage);
-    closesocket(s->udp_fd);
+    //closesocket(s->udp_fd);
 #if HAVE_PTHREAD_CANCEL
     if (s->thread_started) {
         int ret;
